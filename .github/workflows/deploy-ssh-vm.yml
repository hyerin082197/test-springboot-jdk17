name: Deploy using ssh and blob

on:
  workflow_dispatch:
    inputs:
      runner:
        required: true
        type: choice
        options:
          - arc-runner-axccoe-dev
          # - self-hosted
          - ubuntu-latest
      environment:
        description: "Deployment environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prd

jobs:
  build:
    name: (${{ inputs.environment }}) Build using maven
    runs-on: "${{ inputs.runner }}"

    steps:
    # - name: Cache Maven packages
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/.m2/repository
    #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-maven-

    # - name: Set up jdk 17
    #   uses: actions/setup-java@v4
    #   with:
    #     java-version: '17'
    #     distribution: 'temurin'
    #     cache: maven
            
    - name: Check out the repo
      uses: actions/checkout@v4.1.7
      # uses: ./../../common/actions/checkout-v4.1.7
      with:
        fetch-depth: 1
        # path: ${{ github.event.repository.name }}-${{ github.ref_name }}

    - name: Configure maven settings.xml
      run: |
          cat <<EOF > ./settings.xml
          <settings>
          <servers>
              <server>
              <id>github</id>
              <username>${{ github.actor }}</username>
              <password>${{ secrets.GH_ADMIN_TOKEN }}</password>
              </server>
          </servers>
          </settings>
          EOF

    - name: Package artifact file
      run: mvn -B -DskipTests package --file ./pom.xml -s ./settings.xml

    - name: Log in to Azure CLI
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COMMON }}
      run: |
        echo "$AZURE_CREDENTIALS" > azure_credentials.json
        az login \
          --service-principal \
          --username $(jq -r .clientId azure_credentials.json) \
          -p=$(jq -r .clientSecret azure_credentials.json) \
          --tenant $(jq -r .tenantId azure_credentials.json)
        az account set --subscription $(jq -r .subscriptionId azure_credentials.json)
      shell: bash

    - name: Upload jar file to Object Storage
      run: |
        az storage blob upload \
          --account-name ${{ vars.AZURE_COMMON_STORAGE_ACCOUNT }} \
          --container-name ${{ vars.AZURE_COMMON_ARTIFACT_CONTAINER }} \
          --file ./target/*.jar \
          --name ${{ vars.APP_NAME }}.jar \
          --overwrite \
          --auth-mode login
      shell: bash

  deploy-dev:
    name: (${{ inputs.environment }}) Deploy using ssh and blob
    runs-on: "${{ inputs.runner }}"
    needs: build
    if: ${{ inputs.environment == 'dev' }}
    steps:
      - name: Deploy java app
        uses: ./.github/workflows/actions/deploy-ssh-blob-vm
        with:
          environment: "${{ inputs.environment }}"
          storage-account: "${{ vars.AZURE_COMMON_STORAGE_ACCOUNT }}"
          storage-container: "${{ vars.AZURE_COMMON_ARTIFACT_CONTAINER }}"
          storage-access-key: "${{ secrets.AZURE_COMMON_STORAGE_ACCESS_KEY }}"
          ssh-private-key: "${{ secrets.AZURE_VM_SSH_PRIVATE_KEY_DEV }}"
          vm-prefix: "${{ vars.AZURE_VM_PREFIX }}"
          vm-suffix: "vm"
          vm-ip: "${{ secrets.AZURE_VM_IP_DEV }}"
          vm-user: "${{ vars.AZURE_VM_USER }}"
          app-name: "${{ vars.APP_NAME }}"

  deploy-prd:
    name: (${{ inputs.environment }}) Deploy using ssh and blob
    runs-on: "${{ inputs.runner }}"
    needs: build
    if: ${{ inputs.environment == 'prd' }}
    strategy:
      matrix:
        vm-ips: [prd1, prd2]
    steps:
      - name: Extract VM IP
        run: echo "TARGET_VM_IP=$(echo '${{ secrets.AZURE_VM_IP_PRD }}' | jq -r .${{ matrix.vm-ips }} )" >> $GITHUB_ENV

      - name: Deploy java app
        uses: ./.github/workflows/actions/deploy-ssh-blob-vm
        env:
          TARGET_VM_IP: ${{ env.TARGET_VM_IP }}
        with:
          environment: "${{ inputs.environment }}"
          storage-account: "${{ vars.AZURE_COMMON_STORAGE_ACCOUNT }}"
          storage-container: "${{ vars.AZURE_COMMON_ARTIFACT_CONTAINER }}"
          storage-access-key: "${{ secrets.AZURE_COMMON_STORAGE_ACCESS_KEY }}"
          ssh-private-key: "${{ secrets.AZURE_VM_SSH_PRIVATE_KEY_PRD }}"
          vm-prefix: "${{ vars.AZURE_VM_PREFIX }}"
          vm-suffix: "vm"
          vm-ip: "${{ env.TARGET_VM_IP }}"
          vm-user: "${{ vars.AZURE_VM_USER }}"
          app-name: "${{ vars.APP_NAME }}"
